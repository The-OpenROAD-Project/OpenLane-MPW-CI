%!PS-Adobe-3.0
%%Title: qspi_function.ps
%%Creator: XCircuit v0.0 rev-1817832939
%%CreationDate: Thu Dec 16 14:19:06 2021
%%Pages: 1
%%BoundingBox: 0 0 612 792
%%DocumentNeededResources: font Helvetica Helvetica-Bold Helvetica-Oblique 
%%+ font Courier-Bold 
%%EndComments
%%BeginProlog
%
%  PostScript prolog for output from xcircuit
%  Version: 3.9
%
%  Electrical circuit (and otherwise general) drawing program
%
%  Written by Tim Edwards 8/5/93--4/12/16  (tim@opencircuitdesign.com)
%  The Johns Hopkins University (1993-2004)
%  MultiGiG, Inc. (2004-2012)
%  Open Circuit Design (2012-2016)
%
%%BeginResource: procset XCIRCproc 3.9 1
%
% supporting definitions --- these are the primary xcircuit types.

/XCIRCsave save def
/topmat matrix currentmatrix def

/fontslant { /slant exch def [1 0 slant 1 0 0] 
    exch findfont exch makefont dup length dict /ndict exch def
    { 1 index /FID ne { ndict 3 1 roll put } { pop pop } ifelse } forall
    ndict definefont pop} def
/ul { count 0 gt { dup type /stringtype eq showflag 1 eq and { gsave 
   currentpoint topmat setmatrix 0 0 moveto 2 index stringwidth pop (_)
   false charpath flattenpath pathbbox grestore exch pop 1 index
   sub setlinewidth exch pop currentpoint 3 -1 roll add moveto 0
   rlineto stroke moveto } if } if } def
/ol { count 0 gt { dup type /stringtype eq showflag 1 eq and { gsave gsave
   currentpoint topmat setmatrix 2 index stringwidth pop 3 index
   true charpath flattenpath pathbbox grestore exch pop
   exch pop topmat setmatrix (_) true charpath pathbbox grestore
   exch pop 1 index sub setlinewidth exch pop currentpoint
   exch 4 1 roll exch sub add moveto pop 0 rlineto stroke
   moveto } if } if } def
/stW { gsave currentpoint newpath moveto true charpath flattenpath
	pathbbox pop exch pop sub grestore } def
/Ts {mark Tabs aload pop counttomark 1 add array astore /Tabs exch def Tabs
	0 currentpoint pop put} def
/Tbn {mark Tabs aload pop counttomark dup 2 add 1 roll cleartomark 1 sub} def
/Tb { 0 1 Tbn {Tabs exch get dup currentpoint pop lt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/Tf { Tbn -1 0 {Tabs exch get dup currentpoint pop gt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/qS { (aa) stW (a a) stW sub 4 div 0 Kn } def
/hS { qS qS } def
/pspc 0 def
/cf0 { scalefont setfont } bind def
/Kn { dup kY add /kY exch def rmoveto } bind def
/ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.33 mul neg Kn} def
/Ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.67 mul Kn } def
/ns { 0 kY neg Kn /kY 0 def /fscale 1.0 def xfont0 1.0 cf0 } def
/MR { /twidth exch def } def
/CRx { } def
/CR { ns 0 /Bline Bline fscale0 neg add def Bline moveto CRx } def
/cf { dup type /realtype ne {1.0} if exch findfont exch kY 0 eq
	{ 40 mul dup /fscale0 exch def cf0 /xfont0 currentfont def}
	{fscale0 mul fscale mul cf0} ifelse } def
/ctmk { counttomark dup 2 add -1 roll pop } bind def
/label { gsave translate 0 0 moveto dup scale neg
	/rotval exch def /twidth 100000 def /just exch def just 128 and
	0 gt {/mshow {pop} def} {/mshow {show} def} ifelse just 16 and 0
	gt {gsave rotval rotate 0 1 dtransform gsave pagemat setmatrix
	idtransform exch grestore 1 0 dtransform gsave pagemat setmatrix
	idtransform exch grestore dup abs 1e-9 lt {pop mul 0 gt} {3 1 roll
	pop pop 0 lt} ifelse grestore {-1 /rotval rotval neg def /just just
	dup 3 and 1 ne {3 xor} if def} {1} ifelse exch -1e-9 lt {-1 /rotval
	rotval neg def /just just dup 12 and 4 ne {12 xor} if def} {1}
	ifelse scale } if /showflag 0 def /fspc pspc def /Bline 0 def
	/numlines 0 def /padding 0 array def /Tabs 0 array def
	/fscale 1.0 def /kY 0 def gsave /CRx { linewid padding
	aload pop numlines 1 add dup /numlines exch def array astore
	/padding exch def /linewid 0 def } def dup 1 add copy dup 1 0
	dtransform exch atan rotate {exch dup type /stringtype eq {gsave dup
	gsave newpath 0 0 moveto true charpath flattenpath pathbbox pop exch
	pop exch pop grestore currentpoint pop add dup /linewid exch def twidth
	ge {grestore CR exch 1 add dup 2 add {CR} exch 1 roll exch} {grestore}
	ifelse true charpath flattenpath} {dup type /arraytype eq {exec} {12
	string cvs true charpath flattenpath} ifelse} ifelse} repeat
	CRx /CRx {padding aload pop just 1280 and 0 gt {blockwid exch sub just
	1024 and 0 gt {0.5 mul} if} {pop 0} ifelse 0 rmoveto numlines 1 sub
	dup /numlines exch def array astore /padding exch def} def exch pop
	pathbbox grestore 4 copy pop exch pop exch sub /blockwid exch def
	3 -1 roll pop 3 1 roll just 1 and 0 gt {just 2 and
	0 gt {exch pop neg fspc sub} {exch sub 0.5 mul neg} ifelse} {pop neg
	fspc add} ifelse exch Bline exch just 4 and 0 gt {just 8 and 0 gt
	{exch pop neg fspc sub} {add 0.5 mul neg} ifelse} {pop neg fspc add}
	ifelse rotval rotate Kn currentpoint translate /showflag 1 def /Bline
	0 def /Tabs 0 array def /fscale 1.0 def /kY 0 def CRx {dup type
	/stringtype eq {mshow} {dup type /arraytype eq {exec} {12 string cvs
	mshow} ifelse} ifelse} repeat grestore endclip} def
/pinlabel { 4 index 32 and 0 ne hlevel 0 eq or { /pspc 10 def label
	/pspc 0 def } { pop pop pop pop pop {pop} repeat } ifelse } def
/pinglobal { pinlabel } def
/infolabel { pinlabel } def
/graphic { gsave 4 index cvx exec /DataSource get resetfile translate 0 0
	moveto neg rotate dup scale cvx exec image grestore endclip} def

/scb { setrgbcolor } bind def  /sce { defColor aload pop scb } bind def
/cRedef {/defColor currentcolor 3 array astore def} def
/begingate {dup type /dicttype ne {1 dict} if begin	% default params
	dup type /dicttype ne {1 dict} if begin		% instanced params
	/hlevel hlevel 1 add def /defColor currentcolor sce 3 array astore
	def gsave sce dup type /nametype eq { pop } if translate 0 0 moveto
	neg rotate dup type /nametype eq not { dup abs currentlinewidth exch
	div setlinewidth } { pop } ifelse dup abs scale clipped 1 and 1 eq
	{/clipped clipped 1 add def} if} bind def
/endgate { /hlevel hlevel 1 sub def grestore defColor aload pop cRedef
	scb end end endclip} bind def

/hlevel 0 def
/endclip {clipped 1 and 1 eq {grestore /clipped clipped 1 sub def} if} def
/tmpa [1 0 0 1 0 0] def
/gar {8 8 true tmpa {<c0 c0 00 00 0c 0c 00 00>} imagemask} bind
{8 8 true tmpa {<30 70 60 02 03 07 06 20>} imagemask} bind
{8 8 true tmpa {<0c 1e 1e 0c c0 e1 e1 c0>} imagemask} bind
{8 8 true tmpa {<0f 0f 0f 0f f0 f0 f0 f0>} imagemask} bind
{8 8 true tmpa {<3f f3 e1 e1 f3 3f 1e 1e>} imagemask} bind
{8 8 true tmpa {<df cf 8f 9f fd fc f8 f9>} imagemask} bind
{8 8 true tmpa {<ff 3f 3f ff ff f3 f3 ff>} imagemask} bind 7 array astore def
/ppaint { gsave clip tmpa dup setmatrix pathbbox neg exch neg 4 2 roll
  neg 4 -1 roll 2 copy gt {exch} if 8 div ceiling 8 mul 4 2 roll neg 2 copy
  gt {exch} if 8 div ceiling 8 mul 3 -1 roll -8 5 -1 roll
  { 3 index exch 5 exch put dup -8 3 index { 3 index
  exch 4 exch put 3 index exec } for } for pop pop pop pop grestore } bind def
/setstyles {
  currentlinewidth mul setlinewidth /style exch def style 2048 and 0 gt
  clipped 1 and 0 eq and {clip newpath /clipped clipped 1 add def} {
  style 1 and 0 gt not {closepath} if
  style 1024 and 0 gt {2 setlinecap 0 setlinejoin} if
  style 2 and 0 gt {currentlinewidth 4 mul dup 2 array astore 0 setdash} if
  style 4 and 0 gt {0.5 currentlinewidth 4 mul 2 array astore 0 setdash} if
  gsave style 16 and 0 gt { style 224 and -5 bitshift style 256 and 0 gt {
  7 exch sub 8 div dup 1 exch sub currentrgbcolor 3 array astore
  {3 copy mul add 4 1 roll pop} forall pop pop setrgbcolor eofill}
  {dup 7 lt {gar exch get ppaint} {pop eofill} ifelse} ifelse}
  {style 256 and 0 gt {1 setgray eofill} if} ifelse grestore style 8 and 0 gt 
  style 512 eq or {newpath} {stroke} ifelse grestore endclip} ifelse} def     

/addtoy {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll add
	4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtoy1 {1 exch addtoy pop} def
/addtoy3 {3 exch addtoy pop} def
/addtoy4 {4 exch addtoy pop} def
/addtox {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll 3 -1 roll
	add exch 4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtox1 {1 exch addtox pop} def
/addtox3 {3 exch addtox pop} def
/addtox4 {4 exch addtox pop} def
/polygon { gsave /num exch def moveto num 1 sub {lineto} repeat setstyles } def
/xcarc   { gsave newpath arc setstyles } def
/elb { matrix currentmatrix 7 -1 roll 7 -1 roll translate 5 1 roll 4 -1 roll
	3 index div 1 scale } def
/ele { 0 4 1 roll 0 4 1 roll } bind def
/ellipse { gsave elb newpath ele arc setmatrix setstyles } def
/pellip  { elb ele arc setmatrix } def
/nellip  { elb ele arcn setmatrix } def
/spline  { gsave moveto curveto setstyles } def
/polyc   { {lineto} repeat } bind def
/beginpath { gsave moveto } bind def
/endpath { setstyles } bind def
/bop	 { 1 setlinecap 2 setlinejoin 6 setmiterlimit 0 0 0 scb cRedef
	/clipped 0 def} def
/psinsertion {/PSobj save def /showpage {} def /setpagedevice {pop} def bop
	rotate translate dup scale} def
/end_insert {PSobj restore} def
/setpagemat {/pagemat matrix currentmatrix def} def
/inchscale  {setpagemat 0.375 mul dup scale} def
/cmscale    {setpagemat 0.35433071 mul dup scale} def

%%EndResource
%%EndProlog
% XCircuit output starts here.

%%BeginSetup


%%EndSetup

%%Page: spimemio 1
%%PageOrientation: Portrait
%%PageBoundingBox: 0 0 612 792
/pgsave save def bop
1.0000 inchscale
2.6000 setlinewidth 1184 1408 translate

0.678 1.000 0.184 scb
512 1.000 -992 512 -992 -1216 256 -1216 256 512 4 polygon
sce
(\(cont.\)) {/Helvetica-Oblique cf} (Functional Description ) 
{/Helvetica-Bold cf} 4 16 0.000 0.700 -992 480 label
1 1.000 -992 464 256 464 2 polygon
(QSPI Flash interface) {/Helvetica-Bold cf} 2 16 0.000 0.700 -992 416 label
(flash io0\2611 \(pins D10 to D9\), flash csb \(pin C10\), and) {/Helvetica cf} 
2 16 0.000 0.700 -416 416 label
(flash clk \(pin D8\)) {/Helvetica cf} 2 16 0.000 0.700 -416 384 label
(S25FL256L.) {CR} (Cypress) {/Helvetica cf} (e.g., ) {/Helvetica-Oblique cf} 
("flash io1" acting as SDO \(data from CPU to flash\).  Protocol is according to, ) 
{CR} 
(sequence in single-bit mode with pin "flash io0" acting as SDI \(data from flash to CPU\) and pin) 
{CR} 
(The QSPI flash controller is automatically enabled on power-up, and will immediately initiate a read) 
{/Helvetica cf} 12 28 0.000 0.700 -992 352 label
0 1.000 -944 -336 -944 -288 80 -288 80 -336 4 polygon
1 1.000 -912 -336 -912 -384 2 polygon
1 1.000 -880 -336 -880 -384 2 polygon
1 1.000 -848 -336 -848 -384 2 polygon
1 1.000 -816 -336 -816 -384 2 polygon
1 1.000 -784 -336 -784 -384 2 polygon
1 1.000 -752 -336 -752 -384 2 polygon
1 1.000 -720 -336 -720 -384 2 polygon
1 1.000 -688 -336 -688 -384 2 polygon
1 1.000 -656 -336 -656 -384 2 polygon
1 1.000 -624 -336 -624 -384 2 polygon
1 1.000 -592 -336 -592 -384 2 polygon
1 1.000 -560 -336 -560 -384 2 polygon
1 1.000 -528 -336 -528 -384 2 polygon
1 1.000 -496 -336 -496 -384 2 polygon
1 1.000 -464 -336 -464 -384 2 polygon
1 1.000 -400 -336 -400 -384 2 polygon
1 1.000 -368 -336 -368 -384 2 polygon
1 1.000 -336 -336 -336 -384 2 polygon
1 1.000 -304 -336 -304 -384 2 polygon
1 1.000 -272 -336 -272 -384 2 polygon
1 1.000 -240 -336 -240 -384 2 polygon
1 1.000 -208 -336 -208 -384 2 polygon
1 1.000 -176 -336 -176 -384 2 polygon
1 1.000 -144 -336 -144 -384 2 polygon
1 1.000 -112 -336 -112 -384 2 polygon
1 1.000 -80 -336 -80 -384 2 polygon
1 1.000 -48 -336 -48 -384 2 polygon
1 1.000 -16 -336 -16 -384 2 polygon
1 1.000 16 -336 16 -384 2 polygon
1 1.000 48 -336 48 -384 2 polygon
(0) {/Helvetica cf} 2 21 0.000 0.500 64 -360 label
(1) {/Helvetica cf} 2 21 0.000 0.500 32 -360 label
(2) {/Helvetica cf} 2 21 0.000 0.500 0 -360 label
(3) {/Helvetica cf} 2 21 0.000 0.500 -32 -360 label
(4) {/Helvetica cf} 2 21 0.000 0.500 -64 -360 label
(5) {/Helvetica cf} 2 21 0.000 0.500 -96 -360 label
0.600 0.600 0.600 scb
(6) {/Helvetica cf} 2 21 0.000 0.500 -128 -360 label
(7) {/Helvetica cf} 2 21 0.000 0.500 -160 -360 label
sce
(8) {/Helvetica cf} 2 21 0.000 0.500 -192 -360 label
(9) {/Helvetica cf} 2 21 0.000 0.500 -224 -360 label
(10) {/Helvetica cf} 2 21 0.000 0.500 -256 -360 label
(11) {/Helvetica cf} 2 21 0.000 0.500 -288 -360 label
0.600 0.600 0.600 scb
(12) {/Helvetica cf} 2 21 0.000 0.500 -320 -360 label
(13) {/Helvetica cf} 2 21 0.000 0.500 -352 -360 label
(14) {/Helvetica cf} 2 21 0.000 0.500 -384 -360 label
(15) {/Helvetica cf} 2 21 0.000 0.500 -416 -360 label
sce
(16) {/Helvetica cf} 2 21 0.000 0.500 -448 -360 label
(17) {/Helvetica cf} 2 21 0.000 0.500 -480 -360 label
(18) {/Helvetica cf} 2 21 0.000 0.500 -512 -360 label
(19) {/Helvetica cf} 2 21 0.000 0.500 -544 -360 label
(20) {/Helvetica cf} 2 21 0.000 0.500 -576 -360 label
(21) {/Helvetica cf} 2 21 0.000 0.500 -608 -360 label
(22) {/Helvetica cf} 2 21 0.000 0.500 -640 -360 label
0.600 0.600 0.600 scb
(23) {/Helvetica cf} 2 21 0.000 0.500 -672 -360 label
(24) {/Helvetica cf} 2 21 0.000 0.500 -704 -360 label
(25) {/Helvetica cf} 2 21 0.000 0.500 -736 -360 label
(26) {/Helvetica cf} 2 21 0.000 0.500 -768 -360 label
(27) {/Helvetica cf} 2 21 0.000 0.500 -800 -360 label
(28) {/Helvetica cf} 2 21 0.000 0.500 -832 -360 label
(29) {/Helvetica cf} 2 21 0.000 0.500 -864 -360 label
(30) {/Helvetica cf} 2 21 0.000 0.500 -896 -360 label
sce
(31) {/Helvetica cf} 2 21 0.000 0.500 -928 -360 label
(bit) {/Helvetica cf} 2 20 0.000 0.700 112 -352 label
(0x2d000000) {/Courier-Bold cf} 2 16 0.000 0.700 -128 -272 label
1 1.000 -176 -288 -176 -240 2 polygon
1 1.000 -688 -288 -688 -240 2 polygon
1 1.000 -944 -240 -944 -288 2 polygon
1 1.000 80 -240 80 -288 2 polygon
1 1.000 80 -336 80 -384 2 polygon
1 1.000 -944 -336 -944 -384 2 polygon
(0x2d000001) {/Courier-Bold cf} 2 16 360.000 0.700 -384 -272 label
(0x2d000002) {/Courier-Bold cf} 2 16 360.000 0.700 -640 -272 label
(0x2d000003) {/Courier-Bold cf} 2 16 0.000 0.700 -896 -272 label
(address) {/Helvetica cf} 2 17 0.000 0.700 160 -272 label
(value) {/Helvetica cf} 2 20 0.000 0.700 112 -304 label
1 1.000 -944 -240 80 -240 2 polygon
1 1.000 -944 -384 80 -384 2 polygon
(reg_spictrl) {/Courier-Bold cf} 2 16 0.000 0.700 -528 -224 label
1 1.000 -432 -240 -432 -288 2 polygon
1 1.000 -432 -336 -432 -384 2 polygon
(\(see below\)) {/Helvetica cf} 2 17 0.000 0.700 -528 -320 label
(mask bit) {/Helvetica cf} 2 16 0.000 0.700 -896 -432 label
(description) {/Helvetica cf} 2 16 0.000 0.700 -400 -432 label
1 1.000 -912 -448 96 -448 2 polygon
(31) {/Helvetica cf} 2 16 0.000 0.700 -896 -480 label
1 1.000 -912 -336 -912 -288 2 polygon
1 1.000 -656 -336 -656 -288 2 polygon
(\(unused\)) {/Helvetica cf} 2 17 0.000 0.700 -784 -320 label
1 1.000 -432 -288 -432 -336 2 polygon
1 1.000 -304 -288 -304 -336 2 polygon
(\(unused\)) {/Helvetica cf} 2 17 0.000 0.700 -368 -320 label
1 1.000 -176 -288 -176 -336 2 polygon
1 1.000 -112 -288 -112 -336 2 polygon
(22\26120) {/Helvetica cf} 2 16 0.000 0.700 -896 -512 label
(19\26116) {/Helvetica cf} 2 16 0.000 0.700 -896 -544 label
(11\2618) {/Helvetica cf} 2 16 0.000 0.700 -896 -576 label
(5) {/Helvetica cf} 2 16 0.000 0.700 -896 -608 label
(4) {/Helvetica cf} 2 16 0.000 0.700 -896 -640 label
(3\2610) {/Helvetica cf} 2 16 0.000 0.700 -896 -672 label
(default) {/Helvetica cf} 2 16 0.000 0.700 -704 -432 label
(1) {/Helvetica cf} 2 16 0.000 0.700 -688 -480 label
(QSPI flash interface enable) {/Helvetica cf} 2 16 0.000 0.700 -400 -480 label
(0) {/Helvetica cf} 2 16 0.000 0.700 -688 -512 label
(Access mode \(see table below\)) {/Helvetica cf} 2 16 0.000 0.700 -400 -512 
label
(8) {/Helvetica cf} 2 16 0.000 0.700 -688 -544 label
(Dummy clock cycle count) {/Helvetica cf} 2 16 0.000 0.700 -400 -544 label
(Bit-bang OE FLASH_IO3\261FLASH_IO0) {/Helvetica cf} 2 16 0.000 0.700 -400 -576 
label
(Bit-bang FLASH_CSB) {/Helvetica cf} 2 16 0.000 0.700 -400 -608 label
(Bit-bang FLASH_CLK) {/Helvetica cf} 2 16 0.000 0.700 -400 -640 label
(Bit-bang value FLASH_IO3\261FLASH_IO0) {/Helvetica cf} 2 16 0.000 0.700 -400 
-672 label
(0) {/Helvetica cf} 2 16 0.000 0.700 -688 -576 label
(0) {/Helvetica cf} 2 16 0.000 0.700 -688 -608 label
(0) {/Helvetica cf} 2 16 0.000 0.700 -688 -640 label
(0) {/Helvetica cf} 2 16 0.000 0.700 -688 -672 label
(0xFF) {/Courier-Bold cf} 2 16 0.000 0.700 -928 128 label
(0xAB) {/Courier-Bold cf} 2 16 0.000 0.700 -928 96 label
(Mode bit reset) {/Helvetica cf} 2 16 0.000 0.700 -800 128 label
(Release from deep power-down) {/Helvetica cf} 2 16 0.000 0.700 -800 96 label
(0x03) {/Courier-Bold cf} 2 16 0.000 0.700 -928 64 label
(Read w/3 byte address) {/Helvetica cf} 2 16 0.000 0.700 -800 64 label
(0x00) {/Courier-Bold cf} 2 16 0.000 0.700 -928 32 label
(0x00) {/Courier-Bold cf} 2 16 0.000 0.700 -928 0 label
(0x00) {/Courier-Bold cf} 2 16 0.000 0.700 -928 -32 label
(\) \(3 bytes\) \(upper byte is ignored\)) {/Helvetica cf} (0x10000000) 
{/Courier-Bold cf} (Program start address \() {/Helvetica cf} 6 16 0.000 0.700 
-800 32 label
(The initial SPI instruction sequence is as follows:) {/Helvetica cf} 2 16 
0.000 0.700 -992 176 label
(read command to read from a new address.) {CR} 
(The QSPI flash continues to read bytes, either sequentially on the same command, or issuing a new) 
{/Helvetica cf} 4 28 0.000 0.700 -992 -64 label

(The behavior of the QSPI flash controller can be modified by changing values in the register below:) 
{/Helvetica cf} 2 16 0.000 0.700 -992 -160 label
(Access mode bit selection \(bits 22\26120\):) {/Helvetica cf} 2 16 0.000 0.700 
-976 -720 label
(0) {/Helvetica cf} 2 16 0.000 0.700 -976 -768 label
(1) {/Helvetica cf} 2 16 0.000 0.700 -976 -800 label
(000) {/Courier-Bold cf} 2 16 0.000 0.700 -912 -768 label
(001) {/Courier-Bold cf} 2 16 0.000 0.700 -912 -800 label
(Single bit per clock) {/Helvetica cf} 2 16 0.000 0.700 -784 -768 label
(Single bit per clock \(same as 0\)) {/Helvetica cf} 2 16 0.000 0.700 -784 -800 
label
1 1.000 -976 -736 -64 -736 2 polygon

(entire routine to access the SPI flash must be read into SRAM and executed from the SRAM.) 
{CR} 
(The SPI flash can be accessed by bit banging when the enable is off.  To do this from the CPU, the) 
{/Helvetica cf} 4 16 0.000 0.700 -992 -976 label
(Table 10) {/Helvetica-Oblique cf} 2 16 0.000 0.700 -944 -224 label
(page 12) {/Helvetica cf} 2 31 0.000 0.700 240 496 label
(\(see below\)) {/Helvetica cf} 2 17 0.000 0.700 -16 -320 label
(has pins for data lines 0 and 1.) {CR} 
(All additional modes \(QSPI dual and quad modes\) cannot be used, as the management SoC only) 
{/Helvetica cf} 4 28 0.000 0.700 -992 -832 label
(Interrupt) {/Helvetica-Bold cf} 2 16 0.000 0.700 -992 -1120 label
(IRQ \(pin E5\)) {/Helvetica cf} 2 16 0.000 0.700 -480 -1120 label
(The interrupt pin triggers the CPU interrupt channel 5.) {/Helvetica cf} 2 28 
0.000 0.700 -928 -1152 label
pgsave restore showpage

%%Trailer
XCIRCsave restore
%%EOF
